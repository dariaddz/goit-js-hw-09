{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","onFormSubmit","evt","preventDefault","delay","step","amount","currentTarget","promiseDelay","Number","value","stepValue","amountValue","position","console","log","createPromise","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout","then","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAIpC,SAASC,EAAaC,GACpBA,EAAIC,iBAEE,MAAA,MAAEC,EAAF,KAASC,EAAT,OAAeC,GAAWJ,EAAIK,cAGhCC,IAAAA,EAAeC,OAAOL,EAAMM,OAC5BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAK3B,IAAA,IAAIG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EAC1DC,QAAQC,wBAAwBF,iBAAwBL,MAExDQ,EAAcH,EAAUL,GACxBA,GAAgBG,EAKpB,SAASK,EAAcH,EAAUT,GACzBa,MAAAA,EAAgBC,KAAKC,SAAW,GAEhCC,EAAU,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACLP,EACFK,EAAQ,CAAET,SAAAA,EAAUT,MAAAA,IAEpBmB,EAAO,CAAEV,SAAAA,EAAUT,MAAAA,KAEpBA,KAGLgB,EAAQK,KAAK,EAAGZ,SAAAA,EAAUT,MAAAA,MACxBU,QAAQC,2BAA2BF,QAAeT,SAEpDgB,EAAQM,MAAM,EAAGb,SAAAA,EAAUT,MAAAA,MACzBU,QAAQC,0BAA0BF,QAAeT,SAzCrDN,EAAK6B,iBAAiB,SAAU1B","file":"03-promises.c8fc6465.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = evt.currentTarget;\n\n  // -----значения полей в формате числа--------\n  let promiseDelay = Number(delay.value);\n  let stepValue = Number(step.value);\n  let amountValue = Number(amount.value);\n\n  // -------цикл, собирает значения из формы---------------\n  // ---------------вызывает функцию для создания промисов-----\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    console.log(`это промис номер ${position} с задержкой ${promiseDelay} `);\n\n    createPromise(position, promiseDelay);\n    promiseDelay += stepValue;\n  }\n}\n\n// ------функция создает промис--------------------------------------\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  promise.then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  });\n  promise.catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n}\n"]}